# -*- coding: utf-8 -*-
"""PythonUrban_lab2_MatveevKA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eZr9RZXt1rxuwFHN9MozF5IUVfgJLSnY

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install osmnx  # устанавливаем модуль osmnx
!pip install geopandas 
!pip install mapclassify  # необходимо для визуализации
!pip install jupyter_contrib_nbextensions
!pip install jupyterlab
!pip install keplergl
!jupyter labextension install @jupyter-widgets/jupyterlab-manager keplergl-jupyter
!jupyter nbextension install --py --sys-prefix keplergl
!jupyter nbextension enable --py --sys-prefix keplergl

# TODO собрать импорты всех модулей в одном месте
import osmnx as ox
import geopandas as gpd
from google.colab import output
from keplergl import KeplerGl
import pandas as pd

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "R363103"  # название территории для которой будут строиться слои (https://www.openstreetmap.org/relation/363103)

# TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами
RESTAURANTS_FILE_URL = "https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/restaurants.geojson" #ссылка на слой с ресторанами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME
district = ox.geocode_to_gdf([TERRITORY_NAME], by_osmid=True)
district

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее, а также переименовать столбцы в русские названия, кроме столбца geometry
gdf = gpd.read_file(STREETS_FILE_URL, mask=district)
gdf.rename(columns={"name": "Имя"}, inplace=True)
gdf

"""Убедимся в корректности работы"""

gdf.explore(tiles=TILES)

"""### Обработка данных с улицами (Transform)"""

# TODO сгруппировать и объединить геометрии с одинаковыми названиями
gdf["Имя"].is_unique
gdf = gdf.dissolve(by="Имя")
gdf

"""### Дополнительно: проверка на наличие дубликатов"""

gdf.duplicated().value_counts()

"""### Сохранение слоя с улицами (Load)"""

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf.to_crs(4326).to_file('krdistrict.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# TODO отфильтровать улицы по маске геометрии территории полученной ранее
gdf1 = gpd.read_file(KGIOP_FILE_URL, mask=district)

gdf1

"""###Дополнительно: проверка на наличие дубликатов"""

gdf1.duplicated().value_counts()

"""### Обработка объектов культурного наследия (Transform)"""

# TODO добавить два столбца lon и lat, в которых будут долгота и широта 
gdf1["lon"] = gdf1.to_crs(3857).geometry.centroid.to_crs(4326).x
gdf1["lat"] = gdf1.to_crs(3857).geometry.centroid.to_crs(4326).y
gdf1

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# TODO переименовать столбцы в русские названия, кроме столбца geometry
rename_columns = {
    "id": "Номер",
    "ensemble_name": "Имя ансамбля",
    "object_name": "Имя объекта",
    "occurrence_time": "Дата создания",
    "object_location": "Местонахождение",
    "historical_category": "Категория",
    "normative_act": "Нормативный акт",
    "object_type": "Тип объекта",
    "lon": "Долгота",
    "lat": "Широта"
}
gdf1.rename(columns=rename_columns, inplace=True)
gdf1

# TODO сохранить слой в географической проекции в формате GeoJSON
gdf1.to_crs(4326).to_file('kgiopdistrict.geojson', driver='GeoJSON')

"""Убедимся в корректности работы"""

gdf1.explore(tiles=TILES)

"""###Рестораны

Выполним загрузку данных
"""

gdf2 = gpd.read_file(RESTAURANTS_FILE_URL, mask=district)

gdf2

"""Выполним проверку на уникальность"""

gdf2.duplicated().value_counts()

"""Перед созданием geojson файла, переведем столбы на русский (кроме geometry)"""

rename_columns = {
    "Name": "Имя",
    "City function": "Городская функция",
    "Type": "Тип",
    "Address": "Адрес",
    "Coordinates y": "Координата y",
    "Coordinates x": "Координата x",
    "Opening_hours": "Часы открытия",
    "Contact:phone": "Телефон",
    "Website": "Сайт"
}
gdf2.rename(columns=rename_columns, inplace=True)
gdf2

"""  Создадим geojson файл"""

gdf2.to_crs(4326).to_file('krrest.geojson', driver='GeoJSON')

"""### Визуализация слоев"""

#Включить отображение kepler
output.enable_custom_widget_manager()

map = KeplerGl(height=700, width=800)
KRDISTRICT_URL = 'https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/krdistrict.geojson'
KGIOPDISTRICT_URL = 'https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiopdistrict.geojson'
RESTAURANTS_DIST_URL = 'https://raw.githubusercontent.com/Matveev-Kirill/PythonUrban/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/krrest.geojson'

roads_gdf = gpd.read_file(KRDISTRICT_URL)
kgiop_gdf = gpd.read_file(KGIOPDISTRICT_URL)
rest_gdf = gpd.read_file(RESTAURANTS_DIST_URL)

map.add_data(data=roads_gdf, name='Roads')

map.add_data(data=kgiop_gdf, name='KGIOP')

map.add_data(data=rest_gdf, name='Restaurants')     
#show the map
map

"""### **Выводы**
1. Основное количество достопримечательностей Красносельского района сконцентрировано в Красном селе.
2. Основная часть ресторанов Красносельского района сконцентрирована на Ленинском проспекте. Небольшое количество заведение концентрируется неподалеку от достопримечательностей.
"""