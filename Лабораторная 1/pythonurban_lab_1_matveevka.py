# -*- coding: utf-8 -*-
"""PythonUrban_lab_1_MatveevKA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZNz23idGvYH9Oymjbr6oMGae24Io2Jo0

## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

### Фильтрация элементов
"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

## Задачи

##### ***Задача 1. Сделать название городов с заглавной буквы.***
Написать функцию task_1, которая будет принимать список названий городов, а возвращать новый список, в котором в каждой строке первая буква будет заглавной, а все остальные строчные.
"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]

...  # TODO написать функцию task_1
#1 вариант
def task_1(cities):
    fixed_cities = []
    for city in cities:
      upperCase = city[0:1].upper()
      lowerCase = city[1:len(city)].lower()
      fixed_cities.append(upperCase+lowerCase)
    return fixed_cities 
#2 вариант         
def task11(cities):
  fixed_cities=[]
  fixed_cities = [city[0:1].upper()+city[1:len(city)].lower() for city in cities]
  return fixed_cities

#3 вариант
def task12(cities):
  fixed_cities=[]
  fixed_cities = [city.capitalize() for city in cities]
  return fixed_cities
# TODO вызвать функцию и получить новый результат исходного списка list_cities
print("1 способ:")
print(task_1(list_cities))  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']
print("_"*50)
print("2 способ:")
print(task11(list_cities))  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']
print("_"*50)
print("3 способ:")
print(task12(list_cities))  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']
print("_"*50)

"""##### ***Задача 2. Отфильтровать города с населением больше 1 млн. человек.***

Написать функцию task_2, которая будет принимать два аргумента список городов и численность населения.  
Функция должна возвращать новый отфильтрованный список городов, где остались города только с население больше 1 млн. человек


"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6

...  # TODO написать функцию task_2
#1 вариант
def task_2(dict_cities,population):
    fixed_dict_cities = []
    for city in dict_cities:
      if city["population"] >= population:
        fixed_dict_cities.append(city)
    return fixed_dict_cities

#2 вариант        
def task_21(dict_cities,population):
  fixed_dict_cities = []
  fixed_dict_cities = [city for city in dict_cities if city["population"] >= population]
  return fixed_dict_cities    
# TODO вызвать функцию и передать в неё значения list_dict_cities и filter_population
print("1 способ:")
print(task_2(list_dict_cities,filter_population))  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]
print("_"*50)
print("2 способ:")
print(task_21(list_dict_cities,filter_population))  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]
print("_"*50)

"""##### ***Задача 3. Найти общие города среди двух групп и отсортировать их в алфавитном порядке.***

Написать функцию task_3, которая будет принимать 2 списка городов, а возвращать новый список, в котором будут города, которые есть в двух группах.  
Результат функции должен быть отсортирован в алфавитном порядке. 

"""

fisrt_group = ["Москва", 'Владивосток', "Санкт-Петербург"]
second_group = ['Новосибирск', "Ижевск", "Санкт-Петербург", "Москва"]

...  # TODO Написать функцию task_3

def task_3(first,second):
  group = []
  for cityF in first:
    for cityS in second:
      if cityF in cityS:
        group.append(cityF)
  group.sort(reverse=True)      
  return group      

# TODO вызвать функцию и передать в неё значения fisrt_group и second_group

print(task_3(fisrt_group,second_group))  # ['Санкт-Петербург', 'Москва']

"""##### ***Задача 4. Найти количество упоминаний заданного города.***

У списка есть метод `count`, этот метод принимает значение,  
и считает сколько раз он содержится в списке.  

Написать функцию `task_4`, которая принимает два аргумента список городов,  
где нужно искать заданный город.  
И искомый город, количество упоминаний которого нужно подсчитать.
Результатом должно быть количество вхождений города в списке.

Города записанные в разных регистрах, считаются одинаковыми.
"""

list_cities = [  # список городов
    'Новосибирск',
    'Владивосток',
    'Москва',
    'санкт-петербург',
    'Владивосток',
    'Москва',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Владивосток',
    'Ижевск',
    'САНКТ-ПЕТЕРБУРГ',
    'Владивосток',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Москва',
    'Санкт-Петербург'
]
find_city = 'Санкт-Петербург'  # искомый город

...  # написать функцию task_4
def task_4(list_cities,city):
  count = 0

  for cityF in list_cities:
    if cityF.upper() in city.upper():
      count += 1
  return count    


count_cities = task_4(list_cities,find_city)  # TODO вызвать функцию и передать в неё значения list_cities и find_city

print(count_cities)  # 4

"""##### ***Задача 5. Средний индекс озеленения.***

Дан список словарей территорий, где `territory_area` - площадь территории, а `green_zones` список площадей зеленых зон.  
Написать две функции:
- первая будет принимать исходный список городов, и возвращать новый список словарей, в котором для каждой территории посчитан индекс индекс озеленения, как отношение площади зеленых зон к площади территории. Новые словари в списке должен содержать название территории и её индекс озеленения. 
- вторая функция принимает список словарей, в которых посчитаны индексы озеленения для каждой территории и возвращает средний индекс озеленения по всем территориям. 
"""

list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]
new_diction = []
# TODO написать функцию, которая будет высчитывать индексы озеленения для каждой территории
def indexGreen(territories):
  new_list_list_territories = []
  green_idexes_final=[]
  final_list = []
  for territory in territories:
    new_list_list_territories.append(territory["territory_name"])
    green_idexes_final.append(sum(territory["green_zones"])/territory["territory_area"])
  for count,territory in enumerate(new_list_list_territories):
    final_list.append({"territory_name":territory,"greenIndex":green_idexes_final[count]})
  return final_list
  

# TODO написать функцию, которая будет высчитывать средний индекс озеленения по всем территориям
def allGreen(green_territory):
  allTerritory = []
  for territory in green_territory:
    allTerritory.append(territory["greenIndex"])
  return sum(allTerritory)/len(allTerritory)  



# TODO распечатать результат округленный до 4 знаков после запятой
new_diction = indexGreen(list_territories)
print("Территории с индексами озеленения:")
print(new_diction)
print("Средний индекс озеленения по территориям:")
print(round(allGreen(new_diction),4))